# Spring Envers

각각의 대상 엔티티의 이력관리를 간편하게 도와줍니다.
정말 간단하게 적용하자면 @Audited 어노테이션만 붙이면 끝납니다.

알기전에는 대상으로 하는 히스토리용 테이블을 따로 생성하여 json 형식으로 데이터를 저장하고 불러오곤 하였습니다.
상황에 따라 적용하는 방식의 이점이 있겠지만 Envers를 적용한다면 대상 테이블과 똑같은 테이블에 rev(revinfo PK), revtype(생성, 수정, 삭제) 컬럼이 추가로 생성되며 이력관리를 할 수 있습니다.
뭐 이런 기능 필요없이 "나는 내가 직접 테이블을 생성하고 이력에 대한 로직을 짤거야!" 하는분도 있지만.. 빠르게, JPA에 맞게, 모던하게 사용하고자 하는 분들에게 *Envers*를 추천합니다.

## Entity에 Envers 적용

```java
@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Audited // 이력관리용 어노테이션
public class Book implements Serializable {
    private static final long serialVersionUID = 8530213963961662300L;

    @Id
    @GeneratedValue
    private Long id;

    @Column
    private String title;

    @Colume
    private Timestamp publishedAt;
}
```

위와 같이 엔티티를 구성하면 `@Audited`어노테이션으로 인해,
이력관리용 테이블로 **book_aud** 테이블(이름변경 가능)과 **revinfo** 테이블이 필요합니다.
book_aud는 book의 필드값 3개(id, title, publishedAt)와 이력관리 ID값인 `rev`, 타입을 나타내는 `revtype`으로 설계됩니다.
`revtype`은
0: insert
1: update
2: delete
로 나타나는데, enum처리를 하는것이 더 명확할거 같습니다.

테이블은 미리 만들어놓아도 되고, 에제용으로 테이블이 자동생성되도록 설정되어있으면 자동으로 만들어집니다.

여기서 이력관리하고싶지않은 필드가 있다면, 클래스에 `@Audited`을 선언하지말고, 이력을 관리하고 싶은 멤버변수에만 `@Audited`을 넣으면 해당 값만 이력관리가 됩니다.

## RevisionRepository 인터페이스

이력관리들을 조회하는 것도 다 만들어져 있습니다.
이력관련 테이블을 조회하기위해 미리 만들어져있는 **RevisionRepository** 인터페이스를 봅니다.

```java
@NoRepositoryBean
public interface RevisionRepository extends Repository<T, ID> {
    // 최근 리비전 조회
    Revision<N, T> findLastChangeRevision(ID id);
    // id를 사용하여 해당 id의 모든 리비전을 조회
    Revisions<N, T> findRevisions(ID id);
    // 리비전을 페이징 처리하여 조회
    Page<Revision<N, T>> findRevisions(ID id, Pageable pageable);
    // 특정 리비전 조회
    Revision<N, T> findRevision(ID id, N revisionNumber);
}
```

우리는 이를 잘 활용하면 됩니다. BookRepository인터페이스에 RevisionRepository를 상속받도록 합니다.

```java
public interface BookRepository extends JpaRepository<Book, Long>, RevisionRepository<Book, Long, Integer> {}
```

RevisionRepository 인터페이스 사용을 위해서는 추가적인 설정이 필요합니다. 어노테이션 한줄로 모든 설정은 끝납니다.

```java
@EnableJpaRepositories(repositoryFactoryBeanClass =
EnversRevisionRepositoryFactoryBean.class) // EnversRevisionRepositoryFactoryBean 인스턴스 생성
@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
```

### RevisionRepostiroy 테스트

```java
@RunWith(SpringRunner.class)
@SpringBootTest
public class JpaEnversTest {
    private static boolean isInit = false;

    @Autowired
    private BookRepository bookRepository;

    @Before
    public void Book_init_data() {
        if(!isInit) {
            // 10개 book 데이터 저장
            IntStream.rangeClosed(1, 10).forEach(index ->
                bookRepository.save(
                    Book.builder()
                    .title("테스트" + index)
                    .publishedAt(Timestamp.valueOf(LocalDatetime.now()))
                    .build()
            ));

            // 1번 book 삭제
            bookRepository.delete(Long.valueOf(1));

            // 2번 book 수정하기 3번 반복
            Book book2 = bookRepository.findOne(Long.valueOf(2));
            IntStream.rangeClosed(1, 3).forEach(index -> {
                book2.setTitle("수정" + index);
                bookRepository.save(book2);
            });
            isInit = true;
        }
    }

    @Test(expected = InvalidDataAccessApiUsageException.class)
    public void Book_Revision_NULL_Find_Data() {
        Revision revision = bookRepository.findLastChangeRevision(Long.valueOf(1));
        Book book = (Book) revision.getEntity();
        Integer revisionNumber = (Integer) revision.getRevisionNumber();

        assertThat(book.getTitle(), is("테스트1"));
        assertThat(revisionNumber, is(1));
    }

    @Test
    public void Book_Revision_Search() {
        Revision revision1 = bookRepository.findRevision(Long.valueOf(1), 1);
        Book book1 = (Book) revision1.getEntity();
        Integer revisionNumber1 = (Integer) revision1.getRevisionNumber();

        assertThat(book1.getTitle(), is("테스트1"));
        assertThat(revisionNumber1, is(1));

        Revision revision2 = bookRepository.findLastChangeRevision(Long.valueOf(2));
        Book book2 = (Book) revision2.getEntity();
        Integer revisionNumber2 = (Integer) revision2.getRevisionNumber();
        DateTime dateTime = revision2.getRevisionDate();

        assertThat(book.getTitle(), is("수정3"));
        assertThat(revisionNumber2, is(14));
    }

    @Test
    public void Book_Revision_Page_검색() {
        Page<Revision<Integer, Book>> bookPage = bookRepository.findRevisions(Long.valueOf(2), new PageRequest(0, 10));
        assertThat(bookPage.getTotalElements(), is(Long.valueOf(4)));
        assertThat(bookPage.getContent().get(0).getEntity().getTitle(), is("테스트2"));
        assertThat(bookPage.getContent().get(1).getEntity().getTitle(), is("수정1"));
        assertThat(bookPage.getContent().get(2).getEntity().getTitle(), is("수정2"));
        assertThat(bookPage.getContent().get(3).getEntity().getTitle(), is("수정3"));
    }

    @Test
    public void Book_Revisions_검색() {
        Revisions<Integer, Book> revisions = bookRepository.findRevisions(Long.valueOf(2));
        assertThat(revisions.getContent().size(), is(4));
        assertThat(revisions.getContent().get(0).getEntity().getTitle(), is("테스트2"));
        assertThat(revisions.getContent().get(1).getEntity().getTitle(), is("수정1"));
        assertThat(revisions.getContent().get(2).getEntity().getTitle(), is("수정2"));
        assertThat(revisions.getContent().get(3).getEntity().getTitle(), is("수정3"));
    }
}
```

## 참고

* https://haviyj.tistory.com/40
